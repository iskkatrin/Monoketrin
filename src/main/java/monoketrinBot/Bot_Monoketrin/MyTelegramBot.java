package monoketrinBot.Bot_Monoketrin;

import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;

import java.util.ArrayList;
import java.util.List;

@Component
public class MyTelegramBot extends TelegramWebhookBot {

    private String botToken;
    private String botUsername;
    private String botPath;

    public MyTelegramBot(String botToken, String botUsername, String botPath) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.botPath = botPath;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotPath() {
        return botPath;
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if ("/start".equals(messageText)) {
                message.setText("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∏ –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫.");
                addStartButton(message);
            } else if ("–°–¢–ê–†–¢".equals(messageText)) {
                message.setText("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏ –∑–∞–±—Ä–∞–ª —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ");
            } else {
                message.setText("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.");
            }

            return message;
        }

        return null;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–°–¢–ê–†–¢"
    private void addStartButton(SendMessage message) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("–°–¢–ê–†–¢"));

        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
    }
}
